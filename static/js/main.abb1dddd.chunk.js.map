{"version":3,"sources":["components/Card.jsx","components/PlayerHand.jsx","components/DealerHand.jsx","components/Chip.jsx","components/Balance.jsx","components/Stake.jsx","components/Options.jsx","components/Deal.jsx","components/Instructions.jsx","components/Deck.jsx","App.jsx","serviceWorker.js","index.js","components/images/playing_card_back_png_1044088.png"],"names":["Card","props","react_default","a","createElement","className","src","card","image","alt","PlayerHand","this","hand","map","components_Card","React","Component","DealerHand","stand","length","backCard","Chip","classes","concat","color","onClick","addStake","value","Balance","balance","Stake","stake","Options","hit","doubleDown","Deal","deal","Instructions","instructions","dealerWin","playerWin","push","blackJack","console","log","Deck","App","state","deckID","cardsRemaining","shuffled","playerHand","playerValue","playerBust","playerStand","dealerHand","dealerValue","dealerValueHidden","dealerBust","setValuePlayer","total","i","_this","parseInt","setState","setValueDealer","Math","floor","random","fetch","then","cards","json","data","remaining","oldCards","apply","Object","toConsumableArray","result","clearInterval","dealerHit","player","dealer","resolveStake","setInterval","oldBalance","oldStake","newBalance","newStake","setTimeout","_this2","deck","deck_id","components_Deck","components_DealerHand","evaluate","components_PlayerHand","components_Instructions","components_Balance","components_Deal","components_Stake","components_Options","components_Chip","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oQAUeA,SARF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAKC,MAAOC,IAAI,YCWvBC,mLAXX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZM,KAAKV,MAAMW,KAAKC,IAAI,SAAAN,GACnB,OAAOL,EAAAC,EAAAC,cAACU,EAAD,CAAMP,KAAMA,cALJQ,IAAMC,2BC0BhBC,mLAvBX,OAAIN,KAAKV,MAAMiB,MAEXhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZM,KAAKV,MAAMW,KAAKC,IAAI,SAAAN,GACnB,OAAOL,EAAAC,EAAAC,cAACU,EAAD,CAAMP,KAAMA,OAIhBI,KAAKV,MAAMW,KAAKO,OAAS,EAEhCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACU,EAAD,CAAMP,KAAMI,KAAKV,MAAMW,KAAK,KAC5BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKc,IAAUX,IAAI,WAMzBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBArBDU,IAAMC,WCOhBK,EATF,SAAApB,GACX,IAAIqB,EAAO,QAAAC,OAAWtB,EAAMuB,OAC5B,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWiB,EAASG,QAAS,kBAAMxB,EAAMyB,SAASzB,EAAM0B,SAC1D1B,EAAM0B,QCIEC,EARC,SAAA3B,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,YAAkCJ,EAAM4B,WCK/BC,EARD,SAAA7B,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8BJ,EAAM8B,SCO3BC,EAVC,SAAA/B,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKqB,QAASxB,EAAMgC,KAApB,OACA/B,EAAAC,EAAAC,cAAA,OAAKqB,QAASxB,EAAMiB,OAApB,SACAhB,EAAAC,EAAAC,cAAA,OAAKqB,QAASxB,EAAMiC,YAApB,iBCYSC,EAjBF,SAAAlC,GACX,IAAII,EAOJ,OALEA,EADEJ,EAAMW,KAAKO,OAAS,GAAKlB,EAAM8B,MAAQ,EAC7B,iBAEA,eAIZ7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,EAAWoB,QAASxB,EAAMmC,MAA1C,UCiBSC,EA3BM,SAAApC,GACnB,IAAIqC,EAmBJ,OAlBIrC,EAAM8B,OAAS,IAAM9B,EAAMsC,YAActC,EAAMuC,YAAcvC,EAAMwC,KACrEH,EAAe,sCACNrC,EAAM8B,MAAQ,GAAK9B,EAAMW,KAAKO,QAAU,EACjDmB,EAAe,+BACNrC,EAAMW,KAAKO,OAAS,IAAMlB,EAAMsC,YAActC,EAAMuC,UAC7DF,EAAe,GACNrC,EAAMsC,UACfD,EAAe,oDACNrC,EAAMuC,WAAavC,EAAMyC,UAClCJ,EACE,mEACOrC,EAAMuC,UACfF,EAAe,oDACNrC,EAAMwC,KACfH,EAAe,6CAEfK,QAAQC,IAAI,SAGZ1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAKkC,KCbIO,EARF,SAAA5C,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKc,IAAUX,IAAI,OCmZfqC,6MA5YbC,MAAQ,CACNlB,QAAS,IACTE,MAAO,EACPiB,OAAQ,KACRC,eAAgB,KAChBC,UAAU,EACVC,WAAY,GACZC,YAAa,EACbC,YAAY,EACZC,aAAa,EACbd,WAAW,EACXe,WAAY,GACZC,YAAa,EACbC,mBAAmB,EACnBC,YAAY,EACZnB,WAAW,EACXE,MAAM,EACNC,WAAW,KAkBbiB,eAAiB,SAAA/C,GAEf,IADA,IAAIgD,EAAQ,EACHC,EAAI,EAAGA,EAAIjD,EAAKO,OAAQ0C,IAG/B,GAAsB,QAAlBjD,EAAKiD,GAAGlC,MACV,GAAImC,EAAKf,MAAMK,YAAc,IAAMQ,EAAQ,GAAI,CAE7CA,GADY,MAEP,CAGLA,GAFY,QAIT,GACa,SAAlBhD,EAAKiD,GAAGlC,OACU,SAAlBf,EAAKiD,GAAGlC,OACU,UAAlBf,EAAKiD,GAAGlC,MACR,CAGAiC,GAFY,OAGP,CAGLA,GAFYG,SAASnD,EAAKiD,GAAGlC,OAM7BiC,EAAQ,KACVE,EAAKE,SAAS,CAAEX,YAAY,IAC5BS,EAAK5C,SAEO,KAAV0C,GAAgC,IAAhBhD,EAAKO,SACvBwB,QAAQC,IAAI,aACZkB,EAAKE,SAAS,CAAEtB,WAAW,IAC3BoB,EAAK5C,SAEP4C,EAAKE,SAAS,CAAEZ,YAAaQ,OAG/BK,eAAiB,SAAArD,GAEf,IADA,IAAIgD,EAAQ,EACHC,EAAI,EAAGA,EAAIjD,EAAKO,OAAQ0C,IAG/B,GAFAlB,QAAQC,IAAIhC,EAAKiD,GAAGlC,OAEE,QAAlBf,EAAKiD,GAAGlC,MACV,GAAImC,EAAKf,MAAMS,YAAc,IAAMI,EAAQ,GAAI,CAE7CjB,QAAQC,IAAI,YACZgB,GAFY,MAGP,CAELjB,QAAQC,IAAI,aACZgB,GAFY,QAIT,GACa,SAAlBhD,EAAKiD,GAAGlC,OACU,SAAlBf,EAAKiD,GAAGlC,OACU,UAAlBf,EAAKiD,GAAGlC,MACR,CAEAgB,QAAQC,IAAI,aACZgB,GAFY,OAGP,CACL,IAAIjC,EAAQoC,SAASnD,EAAKiD,GAAGlC,OAC7BgB,QAAQC,IAAR,UAAArB,OAAsBX,EAAKiD,GAAGlC,QAC9BiC,GAASjC,EAGbgB,QAAQC,IAAIgB,GACRA,EAAQ,IACVE,EAAKE,SAAS,CAAEN,YAAY,IAE9BI,EAAKE,SAAS,CAAER,YAAaI,OAG/BxB,KAAO,WACL,GAAI0B,EAAKf,MAAME,eAAiB,IACjBiB,KAAKC,MAAsB,GAAhBD,KAAKE,UAI3BN,EAAKf,MAAMhB,MAAQ,GAAK+B,EAAKf,MAAMI,WAAWhC,QAAU,IAC1DkD,MAAK,uCAAA9C,OACoCuC,EAAKf,MAAMC,OAD/C,mBAGFsB,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SAEdF,KAAK,SAAAG,GAEJX,EAAKE,SAAS,CACZb,WAAYsB,EAAKF,MACjBtB,eAAgBwB,EAAKC,YAEvBZ,EAAKH,eAAeG,EAAKf,MAAMI,cAGnCkB,MAAK,uCAAA9C,OACoCuC,EAAKf,MAAMC,OAD/C,mBAGFsB,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SAEdF,KAAK,SAAAG,GAEJX,EAAKE,SAAS,CACZT,WAAYkB,EAAKF,MACjBtB,eAAgBwB,EAAKC,kBAM/BzC,IAAM,YAED6B,EAAKf,MAAMM,YACZS,EAAKf,MAAMI,WAAWhC,QAAU,IAC/B2C,EAAKf,MAAMO,aAEZe,MAAK,uCAAA9C,OACoCuC,EAAKf,MAAMC,OAD/C,mBAGFsB,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SAEdF,KAAK,SAAAG,GAEJ,IAAIE,EAAWb,EAAKf,MAAMI,WAC1BwB,EAASlC,KAATmC,MAAAD,EAAQE,OAAAC,EAAA,EAAAD,CAASJ,EAAKF,QACtBT,EAAKE,SAAS,CACZb,WAAYwB,EACZ1B,eAAgBwB,EAAKC,YAEvBZ,EAAKH,eAAeG,EAAKf,MAAMI,iBAKvC4B,OAAS,WACPC,cAAclB,EAAKmB,WACnBtC,QAAQC,IAAI,aACZ,IAAIsC,EAASpB,EAAKf,MAAMK,YACpB+B,EAASrB,EAAKf,MAAMS,YACpB0B,EAASC,IAAWrB,EAAKf,MAAMW,YACjCf,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAOD,WAAW,KACpC2C,EAASC,GAAUrB,EAAKf,MAAMW,YACvCf,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAMD,WAAW,KACnC2C,EAASC,IAAWrB,EAAKf,MAAMM,YACxCV,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAMD,WAAW,KACnC2C,EAASC,GAAUrB,EAAKf,MAAMM,YACvCV,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAOD,WAAW,KACpCuB,EAAKf,MAAML,WACpBC,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAMD,WAAW,KAE5C2C,IAAWC,GACVrB,EAAKf,MAAMW,YACXI,EAAKf,MAAMM,WAIH6B,EAASC,GAAUrB,EAAKf,MAAMM,YACvCV,QAAQC,IAAI,cACZkB,EAAKE,SAAS,CAAExB,WAAW,EAAOD,WAAW,KACxCI,QAAQC,IAAI,WALjBD,QAAQC,IAAI,QACZkB,EAAKE,SAAS,CAAEvB,MAAM,KAKxBqB,EAAKsB,kBAGPH,UAAY,WACV,IAAIhD,EAAMoD,YAAY,WAChBvB,EAAKf,MAAMS,YAAc,GAC3Ba,MAAK,uCAAA9C,OAEDuC,EAAKf,MAAMC,OAFV,mBAKFsB,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SAEdF,KAAK,SAAAG,GAEJ,IAAIE,EAAWb,EAAKf,MAAMQ,WAC1BoB,EAASlC,KAATmC,MAAAD,EAAQE,OAAAC,EAAA,EAAAD,CAASJ,EAAKF,QACtBT,EAAKE,SAAS,CACZT,WAAYoB,EACZ1B,eAAgBwB,EAAKC,YAEvBZ,EAAKG,eAAeH,EAAKf,MAAMQ,cAE1BO,EAAKf,MAAMS,aAAe,IAAMM,EAAKf,MAAMS,aAAe,IACnEwB,cAAc/C,GACdU,QAAQC,IAAI,gBACZkB,EAAKiB,UACIjB,EAAKf,MAAMS,YAAc,KAClCwB,cAAc/C,GACdU,QAAQC,IAAI,eACZkB,EAAKiB,WAEN,QAGL7D,MAAQ,WACF4C,EAAKf,MAAMI,WAAWhC,OAAS,IACjC2C,EAAKE,SAAS,CAAEV,aAAa,EAAMG,mBAAmB,IACtDK,EAAKG,eAAeH,EAAKf,MAAMQ,YAC1BO,EAAKf,MAAMM,WAELS,EAAKf,MAAMM,WACpBS,EAAKiB,SACIjB,EAAKf,MAAML,WACpBoB,EAAKiB,SAJLjB,EAAKmB,gBASXvD,SAAW,SAAAC,GACT,GAAImC,EAAKf,MAAMI,WAAWhC,QAAU,EAAG,CACrC,IAAImE,EAAaxB,EAAKf,MAAMlB,QACxB0D,EAAWxB,SAASD,EAAKf,MAAMhB,OACnC,GAAIJ,GAAS2D,EAAY,CACvB,IAAIE,EAAaF,EAAa3D,EAC1B8D,EAAYF,GAAYxB,SAASpC,GACrCmC,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO0D,UAEzC,GAAyB,IAArB3B,EAAKf,MAAMhB,OAAe+B,EAAKf,MAAMI,WAAWhC,OAAS,EAAG,CACrE2C,EAAKE,SAAS,CACZd,UAAU,EACVC,WAAY,GACZC,YAAa,EACbC,YAAY,EACZC,aAAa,EACbd,WAAW,EACXe,WAAY,GACZC,YAAa,EACbE,YAAY,EACZnB,WAAW,EACXE,MAAM,EACNC,WAAW,IAEb,IAAI4C,EAAaxB,EAAKf,MAAMlB,QACxB0D,EAAWxB,SAASD,EAAKf,MAAMhB,OACnC,GAAIJ,GAAS2D,EAAY,CACvB,IAAIE,EAAaF,EAAa3D,EAC1B8D,EAAYF,GAAYxB,SAASpC,GACrCmC,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO0D,SAKlDL,aAAe,WACb,GAAItB,EAAKf,MAAMP,YAAcsB,EAAKf,MAAML,UAAW,CACjD,IAGI8C,EADmB,EAFX1B,EAAKf,MAAMhB,MACN+B,EAAKf,MAAMlB,QAG5BiC,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO,SACvC,GAAI+B,EAAKf,MAAMP,WAAasB,EAAKf,MAAML,UAAW,CACvD,IAGI8C,EADmB,IAFX1B,EAAKf,MAAMhB,MACN+B,EAAKf,MAAMlB,QAG5BiC,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO,SACvC,GAAI+B,EAAKf,MAAMR,UACpBuB,EAAKE,SAAS,CAAEjC,MAAO,SAClB,GAAI+B,EAAKf,MAAMN,KAAM,CAC1B,IAGI+C,EAHQ1B,EAAKf,MAAMhB,MACN+B,EAAKf,MAAMlB,QAG5BiC,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO,QAIhDG,WAAa,WACX,GAAI4B,EAAKf,MAAMI,WAAWhC,OAAS,IAAM2C,EAAKf,MAAMO,YAAa,EAC1DQ,EAAKf,MAAMM,YAAcS,EAAKf,MAAMI,WAAWhC,QAAU,GAC5DkD,MAAK,uCAAA9C,OAEDuC,EAAKf,MAAMC,OAFV,mBAKFsB,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SAEdF,KAAK,SAAAG,GAEJ,IAAIE,EAAWb,EAAKf,MAAMI,WAC1BwB,EAASlC,KAATmC,MAAAD,EAAQE,OAAAC,EAAA,EAAAD,CAASJ,EAAKF,QACtBT,EAAKE,SAAS,CACZb,WAAYwB,EACZ1B,eAAgBwB,EAAKC,YAEvBZ,EAAKH,eAAeG,EAAKf,MAAMI,cAGrC,IAAImC,EAAaxB,EAAKf,MAAMlB,QACxB0D,EAAWxB,SAASD,EAAKf,MAAMhB,OACnC,GAAIwD,GAAYD,EAAY,CAC1B,IAAIE,EAAaF,EAAaC,EAC1BE,EAAsB,EAAXF,EACfzB,EAAKE,SAAS,CAAEnC,QAAS2D,EAAYzD,MAAO0D,IAC5CC,WAAW5B,EAAK5C,QAAS,2FAlUX,IAAAyE,EAAAhF,KAClB0D,MAAM,iEACHC,KAAK,SAAAsB,GACJ,OAAOA,EAAKpB,SAEbF,KAAK,SAAAG,GAEJkB,EAAK3B,SAAS,CACZhB,OAAQyB,EAAKoB,QACb5C,eAAgBwB,EAAKC,UACrBxB,SAAUuB,EAAKvB,8CA8TrB,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0F,EAAD,MACA5F,EAAAC,EAAAC,cAAC2F,EAAD,CACEnF,KAAMD,KAAKoC,MAAMQ,WACjBrC,MAAOP,KAAKoC,MAAMO,YAClB0C,SAAUrF,KAAKsD,iBAEjB/D,EAAAC,EAAAC,cAAA,2BAAmBO,KAAKoC,MAAMS,aAE9BtD,EAAAC,EAAAC,cAAC6F,EAAD,CAAYrF,KAAMD,KAAKoC,MAAMI,aAC7BjD,EAAAC,EAAAC,cAAA,yBAAiBO,KAAKoC,MAAMK,aAC5BlD,EAAAC,EAAAC,cAAC8F,EAAD,CACEzD,KAAM9B,KAAKoC,MAAMN,KACjBF,UAAW5B,KAAKoC,MAAMR,UACtBC,UAAW7B,KAAKoC,MAAMP,UACtBT,MAAOpB,KAAKoC,MAAMhB,MAClBnB,KAAMD,KAAKoC,MAAMI,WACjBT,UAAW/B,KAAKoC,MAAML,YAExBxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC+F,EAAD,CAAStE,QAASlB,KAAKoC,MAAMlB,UAC7B3B,EAAAC,EAAAC,cAACgG,EAAD,CACEhE,KAAMzB,KAAKyB,KACXxB,KAAMD,KAAKoC,MAAMI,WACjBpB,MAAOpB,KAAKoC,MAAMhB,QAEpB7B,EAAAC,EAAAC,cAACiG,EAAD,CAAOtE,MAAOpB,KAAKoC,MAAMhB,SAG3B7B,EAAAC,EAAAC,cAACkG,EAAD,CACErE,IAAKtB,KAAKsB,IACVf,MAAOP,KAAKO,MACZgB,WAAYvB,KAAKuB,aAEnBhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,IAAIH,MAAM,QAAQE,SAAUf,KAAKe,WAC7CxB,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,IAAIH,MAAM,MAAME,SAAUf,KAAKe,WAC3CxB,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,KAAKH,MAAM,QAAQE,SAAUf,KAAKe,WAC9CxB,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,KAAKH,MAAM,QAAQE,SAAUf,KAAKe,WAC9CxB,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,MAAMH,MAAM,SAASE,SAAUf,KAAKe,WAChDxB,EAAAC,EAAAC,cAACmG,EAAD,CAAM5E,MAAM,MAAMH,MAAM,SAASE,SAAUf,KAAKe,oBAtYxCX,IAAMC,WCAJwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5G,EAAAC,EAAAC,cAAC2G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.abb1dddd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => {\n  return (\n    <div className=\"card\">\n      <img src={props.card.image} alt=\"card\" />\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nclass PlayerHand extends React.Component {\n  render() {\n    return (\n      <div className=\"hand\">\n        {this.props.hand.map(card => {\n          return <Card card={card} />;\n          // <img src={card.image} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PlayerHand;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport backCard from \"./images/playing_card_back_png_1044088.png\";\n\nclass DealerHand extends React.Component {\n  render() {\n    if (this.props.stand) {\n      return (\n        <div className=\"hand\">\n          {this.props.hand.map(card => {\n            return <Card card={card} />;\n          })}\n        </div>\n      );\n    } else if (this.props.hand.length > 0) {\n      return (\n        <div className=\"hand\">\n          <Card card={this.props.hand[0]} />\n          <div className=\"card\">\n            <img src={backCard} alt=\"card\" />\n          </div>\n        </div>\n      );\n    }\n\n    return <div className=\"hand\" />;\n  }\n}\n\nexport default DealerHand;\n","import React from \"react\";\n\nconst Chip = props => {\n  let classes = `chip ${props.color}`;\n  return (\n    <div className={classes} onClick={() => props.addStake(props.value)}>\n      {props.value}\n    </div>\n  );\n};\n\nexport default Chip;\n","import React from \"react\";\n\nconst Balance = props => {\n  return (\n    <div className=\"numbers\">\n      <h3 className=\"balance\">Balance: {props.balance}</h3>\n    </div>\n  );\n};\n\nexport default Balance;\n","import React from \"react\";\n\nconst Stake = props => {\n  return (\n    <div className=\"numbers\">\n      <h3 className=\"stake\">Stake: {props.stake}</h3>\n    </div>\n  );\n};\n\nexport default Stake;\n","import React from \"react\";\n\nconst Options = props => {\n  return (\n    <div className=\"options\">\n      <div onClick={props.hit}>Hit</div>\n      <div onClick={props.stand}>Stand</div>\n      <div onClick={props.doubleDown}>Double Down</div>\n    </div>\n  );\n};\n\nexport default Options;\n","import React from \"react\";\n\nconst Deal = props => {\n  let className;\n  if (props.hand.length < 1 && props.stake > 0) {\n    className = \"deal greenDeal\";\n  } else {\n    className = \"deal redDeal\";\n  }\n\n  return (\n    <div className=\"deal\">\n      <div className={className} onClick={props.deal}>\n        Deal\n      </div>\n    </div>\n  );\n};\n\nexport default Deal;\n","import React from \"react\";\n\nconst Instructions = props => {\n  let instructions;\n  if (props.stake <= 0 && !props.dealerWin && !props.playerWin && !props.push) {\n    instructions = \"Click on the chips to place a stake\";\n  } else if (props.stake > 0 && props.hand.length <= 0) {\n    instructions = \"Hit the deal button to start\";\n  } else if (props.hand.length > 0 && !props.dealerWin && !props.playerWin) {\n    instructions = \"\";\n  } else if (props.dealerWin) {\n    instructions = \"Dealer wins! Set a new stake to start a new round\";\n  } else if (props.playerWin && props.blackJack) {\n    instructions =\n      \"Player wins with Blackjack! Set a new stake to start a new round\";\n  } else if (props.playerWin) {\n    instructions = \"Player wins! Set a new stake to start a new round\";\n  } else if (props.push) {\n    instructions = \"Push! Set a new stake to start a new round\";\n  } else {\n    console.log(\"error\");\n  }\n  return (\n    <div className=\"instructions\">\n      <h2>{instructions}</h2>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport backCard from \"./images/playing_card_back_png_1044088.png\";\n\nconst Deck = props => {\n  return (\n    <div className=\"deck\">\n      <img src={backCard} alt=\"\" />\n    </div>\n  );\n};\n\nexport default Deck;\n","import React from \"react\";\nimport \"./App.css\";\nimport PlayerHand from \"./components/PlayerHand\";\nimport DealerHand from \"./components/DealerHand\";\nimport Chip from \"./components/Chip\";\nimport Balance from \"./components/Balance\";\nimport Stake from \"./components/Stake\";\nimport Options from \"./components/Options\";\nimport Deal from \"./components/Deal\";\nimport Instructions from \"./components/Instructions\";\nimport Deck from \"./components/Deck\";\n\nclass App extends React.Component {\n  state = {\n    balance: 1000,\n    stake: 0,\n    deckID: null,\n    cardsRemaining: null,\n    shuffled: false,\n    playerHand: [],\n    playerValue: 0,\n    playerBust: false,\n    playerStand: false,\n    playerWin: false,\n    dealerHand: [],\n    dealerValue: 0,\n    dealerValueHidden: true,\n    dealerBust: false,\n    dealerWin: false,\n    push: false,\n    blackJack: false\n  };\n\n  componentDidMount() {\n    fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6\")\n      .then(deck => {\n        return deck.json();\n      })\n      .then(data => {\n        // console.log(data);\n        this.setState({\n          deckID: data.deck_id,\n          cardsRemaining: data.remaining,\n          shuffled: data.shuffled\n        });\n      });\n  }\n\n  setValuePlayer = hand => {\n    let total = 0;\n    for (let i = 0; i < hand.length; i++) {\n      // console.log(hand[i].value);\n      // if  else\n      if (hand[i].value === \"ACE\") {\n        if (this.state.playerValue > 10 || total > 10) {\n          let value = 1;\n          total += value;\n        } else {\n          let value = 11;\n          // console.log(\"adding 11\");\n          total += value;\n        }\n      } else if (\n        hand[i].value === \"JACK\" ||\n        hand[i].value === \"KING\" ||\n        hand[i].value === \"QUEEN\"\n      ) {\n        let value = 10;\n        // console.log(\"adding 10\");\n        total += value;\n      } else {\n        let value = parseInt(hand[i].value);\n        // console.log(`adding ${hand[i].value}`);\n        total += value;\n      }\n    }\n    // console.log(total);\n    if (total > 21) {\n      this.setState({ playerBust: true });\n      this.stand();\n    }\n    if (total === 21 && hand.length === 2) {\n      console.log(\"blackJack\");\n      this.setState({ blackJack: true });\n      this.stand();\n    }\n    this.setState({ playerValue: total });\n  };\n\n  setValueDealer = hand => {\n    let total = 0;\n    for (let i = 0; i < hand.length; i++) {\n      console.log(hand[i].value);\n      // if  else\n      if (hand[i].value === \"ACE\") {\n        if (this.state.dealerValue > 10 || total > 10) {\n          let value = 1;\n          console.log(\"adding 1\");\n          total += value;\n        } else {\n          let value = 11;\n          console.log(\"adding 11\");\n          total += value;\n        }\n      } else if (\n        hand[i].value === \"JACK\" ||\n        hand[i].value === \"KING\" ||\n        hand[i].value === \"QUEEN\"\n      ) {\n        let value = 10;\n        console.log(\"adding 10\");\n        total += value;\n      } else {\n        let value = parseInt(hand[i].value);\n        console.log(`adding ${hand[i].value}`);\n        total += value;\n      }\n    }\n    console.log(total);\n    if (total > 21) {\n      this.setState({ dealerBust: true });\n    }\n    this.setState({ dealerValue: total });\n  };\n\n  deal = () => {\n    if (this.state.cardsRemaining < 130) {\n      let random = Math.floor(Math.random() * 10);\n      if (random === 1) {\n      }\n    }\n    if (this.state.stake > 0 && this.state.playerHand.length <= 0) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=2`\n      )\n        .then(cards => {\n          return cards.json();\n        })\n        .then(data => {\n          // console.log(data);\n          this.setState({\n            playerHand: data.cards,\n            cardsRemaining: data.remaining\n          });\n          this.setValuePlayer(this.state.playerHand);\n        });\n\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=2`\n      )\n        .then(cards => {\n          return cards.json();\n        })\n        .then(data => {\n          // console.log(data);\n          this.setState({\n            dealerHand: data.cards,\n            cardsRemaining: data.remaining\n          });\n        });\n    }\n  };\n\n  hit = () => {\n    if (\n      !this.state.playerBust &&\n      this.state.playerHand.length >= 2 &&\n      !this.state.playerStand\n    ) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckID}/draw/?count=1`\n      )\n        .then(cards => {\n          return cards.json();\n        })\n        .then(data => {\n          // console.log(data);\n          let oldCards = this.state.playerHand;\n          oldCards.push(...data.cards);\n          this.setState({\n            playerHand: oldCards,\n            cardsRemaining: data.remaining\n          });\n          this.setValuePlayer(this.state.playerHand);\n        });\n    }\n  };\n\n  result = () => {\n    clearInterval(this.dealerHit);\n    console.log(\"resulting\");\n    let player = this.state.playerValue;\n    let dealer = this.state.dealerValue;\n    if (player < dealer && !this.state.dealerBust) {\n      console.log(\"dealer win\");\n      this.setState({ playerWin: false, dealerWin: true });\n    } else if (player < dealer && this.state.dealerBust) {\n      console.log(\"player win\");\n      this.setState({ playerWin: true, dealerWin: false });\n    } else if (player > dealer && !this.state.playerBust) {\n      console.log(\"player win\");\n      this.setState({ playerWin: true, dealerWin: false });\n    } else if (player > dealer && this.state.playerBust) {\n      console.log(\"dealer win\");\n      this.setState({ playerWin: false, dealerWin: true });\n    } else if (this.state.blackJack) {\n      console.log(\"player Win\");\n      this.setState({ playerWin: true, dealerWin: false });\n    } else if (\n      player === dealer &&\n      !this.state.dealerBust &&\n      !this.state.playerBust\n    ) {\n      console.log(\"push\");\n      this.setState({ push: true });\n    } else if (player > dealer && this.state.playerBust) {\n      console.log(\"dealer win\");\n      this.setState({ playerWin: false, dealerWin: true });\n    } else console.log(\"broken\");\n    this.resolveStake();\n  };\n\n  dealerHit = () => {\n    let hit = setInterval(() => {\n      if (this.state.dealerValue < 17) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${\n            this.state.deckID\n          }/draw/?count=1`\n        )\n          .then(cards => {\n            return cards.json();\n          })\n          .then(data => {\n            // console.log(data);\n            let oldCards = this.state.dealerHand;\n            oldCards.push(...data.cards);\n            this.setState({\n              dealerHand: oldCards,\n              cardsRemaining: data.remaining\n            });\n            this.setValueDealer(this.state.dealerHand);\n          });\n      } else if (this.state.dealerValue >= 17 && this.state.dealerValue <= 21) {\n        clearInterval(hit);\n        console.log(\"dealer stand\");\n        this.result();\n      } else if (this.state.dealerValue > 21) {\n        clearInterval(hit);\n        console.log(\"dealer bust\");\n        this.result();\n      }\n    }, 1000);\n  };\n\n  stand = () => {\n    if (this.state.playerHand.length > 0) {\n      this.setState({ playerStand: true, dealerValueHidden: false });\n      this.setValueDealer(this.state.dealerHand);\n      if (!this.state.playerBust) {\n        this.dealerHit();\n      } else if (this.state.playerBust) {\n        this.result();\n      } else if (this.state.blackJack) {\n        this.result();\n      }\n    }\n  };\n\n  addStake = value => {\n    if (this.state.playerHand.length <= 0) {\n      let oldBalance = this.state.balance;\n      let oldStake = parseInt(this.state.stake);\n      if (value <= oldBalance) {\n        let newBalance = oldBalance - value;\n        let newStake = (oldStake += parseInt(value));\n        this.setState({ balance: newBalance, stake: newStake });\n      }\n    } else if (this.state.stake === 0 && this.state.playerHand.length > 0) {\n      this.setState({\n        shuffled: false,\n        playerHand: [],\n        playerValue: 0,\n        playerBust: false,\n        playerStand: false,\n        playerWin: false,\n        dealerHand: [],\n        dealerValue: 0,\n        dealerBust: false,\n        dealerWin: false,\n        push: false,\n        blackJack: false\n      });\n      let oldBalance = this.state.balance;\n      let oldStake = parseInt(this.state.stake);\n      if (value <= oldBalance) {\n        let newBalance = oldBalance - value;\n        let newStake = (oldStake += parseInt(value));\n        this.setState({ balance: newBalance, stake: newStake });\n      }\n    }\n  };\n\n  resolveStake = () => {\n    if (this.state.playerWin && !this.state.blackJack) {\n      let stake = this.state.stake;\n      let oldBalance = this.state.balance;\n      let winnings = stake * 2;\n      let newBalance = winnings + oldBalance;\n      this.setState({ balance: newBalance, stake: 0 });\n    } else if (this.state.playerWin && this.state.blackJack) {\n      let stake = this.state.stake;\n      let oldBalance = this.state.balance;\n      let winnings = stake * 2.5;\n      let newBalance = winnings + oldBalance;\n      this.setState({ balance: newBalance, stake: 0 });\n    } else if (this.state.dealerWin) {\n      this.setState({ stake: 0 });\n    } else if (this.state.push) {\n      let stake = this.state.stake;\n      let oldBalance = this.state.balance;\n      let winnings = stake;\n      let newBalance = winnings + oldBalance;\n      this.setState({ balance: newBalance, stake: 0 });\n    }\n  };\n\n  doubleDown = () => {\n    if (this.state.playerHand.length > 0 && !this.state.playerStand) {\n      if (!this.state.playerBust && this.state.playerHand.length >= 2) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${\n            this.state.deckID\n          }/draw/?count=1`\n        )\n          .then(cards => {\n            return cards.json();\n          })\n          .then(data => {\n            // console.log(data);\n            let oldCards = this.state.playerHand;\n            oldCards.push(...data.cards);\n            this.setState({\n              playerHand: oldCards,\n              cardsRemaining: data.remaining\n            });\n            this.setValuePlayer(this.state.playerHand);\n          });\n      }\n      let oldBalance = this.state.balance;\n      let oldStake = parseInt(this.state.stake);\n      if (oldStake <= oldBalance) {\n        let newBalance = oldBalance - oldStake;\n        let newStake = oldStake * 2;\n        this.setState({ balance: newBalance, stake: newStake });\n        setTimeout(this.stand(), 500);\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Deck />\n        <DealerHand\n          hand={this.state.dealerHand}\n          stand={this.state.playerStand}\n          evaluate={this.setValueDealer}\n        />\n        <h3>Dealer total: {this.state.dealerValue}</h3>\n\n        <PlayerHand hand={this.state.playerHand} />\n        <h3>Your total: {this.state.playerValue}</h3>\n        <Instructions\n          push={this.state.push}\n          dealerWin={this.state.dealerWin}\n          playerWin={this.state.playerWin}\n          stake={this.state.stake}\n          hand={this.state.playerHand}\n          blackJack={this.state.blackJack}\n        />\n        <div className=\"mid-row\">\n          <Balance balance={this.state.balance} />\n          <Deal\n            deal={this.deal}\n            hand={this.state.playerHand}\n            stake={this.state.stake}\n          />\n          <Stake stake={this.state.stake} />\n        </div>\n\n        <Options\n          hit={this.hit}\n          stand={this.stand}\n          doubleDown={this.doubleDown}\n        />\n        <div className=\"chips\">\n          <Chip value=\"1\" color=\"white\" addStake={this.addStake} />\n          <Chip value=\"5\" color=\"red\" addStake={this.addStake} />\n          <Chip value=\"25\" color=\"green\" addStake={this.addStake} />\n          <Chip value=\"50\" color=\"black\" addStake={this.addStake} />\n          <Chip value=\"100\" color=\"purple\" addStake={this.addStake} />\n          <Chip value=\"500\" color=\"orange\" addStake={this.addStake} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/playing_card_back_png_1044088.f89aa120.png\";"],"sourceRoot":""}